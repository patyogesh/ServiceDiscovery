[2016-04-27 16:44:42,281] TRACE Controller 1 epoch 68 started leader election for partition [pipeline,2] (state.change.logger)
[2016-04-27 16:44:42,990] ERROR Controller 1 epoch 68 encountered error while electing leader for partition [pipeline,2] due to: Preferred replica 2 for partition [pipeline,2] is either not alive or not in the isr. Current leader and ISR: [{"leader":1,"leader_epoch":54,"isr":[1]}]. (state.change.logger)
[2016-04-27 16:44:42,990] ERROR Controller 1 epoch 68 initiated state change for partition [pipeline,2] from OnlinePartition to OnlinePartition failed (state.change.logger)
kafka.common.StateChangeFailedException: encountered error while electing leader for partition [pipeline,2] due to: Preferred replica 2 for partition [pipeline,2] is either not alive or not in the isr. Current leader and ISR: [{"leader":1,"leader_epoch":54,"isr":[1]}].
	at kafka.controller.PartitionStateMachine.electLeaderForPartition(PartitionStateMachine.scala:368)
	at kafka.controller.PartitionStateMachine.kafka$controller$PartitionStateMachine$$handleStateChange(PartitionStateMachine.scala:207)
	at kafka.controller.PartitionStateMachine$$anonfun$handleStateChanges$2.apply(PartitionStateMachine.scala:146)
	at kafka.controller.PartitionStateMachine$$anonfun$handleStateChanges$2.apply(PartitionStateMachine.scala:145)
	at scala.collection.immutable.Set$Set1.foreach(Set.scala:79)
	at kafka.controller.PartitionStateMachine.handleStateChanges(PartitionStateMachine.scala:145)
	at kafka.controller.KafkaController.onPreferredReplicaElection(KafkaController.scala:662)
	at kafka.controller.KafkaController$$anonfun$kafka$controller$KafkaController$$checkAndTriggerPartitionRebalance$4$$anonfun$apply$18$$anonfun$apply$5.apply$mcV$sp(KafkaController.scala:1225)
	at kafka.controller.KafkaController$$anonfun$kafka$controller$KafkaController$$checkAndTriggerPartitionRebalance$4$$anonfun$apply$18$$anonfun$apply$5.apply(KafkaController.scala:1220)
	at kafka.controller.KafkaController$$anonfun$kafka$controller$KafkaController$$checkAndTriggerPartitionRebalance$4$$anonfun$apply$18$$anonfun$apply$5.apply(KafkaController.scala:1220)
	at kafka.utils.CoreUtils$.inLock(CoreUtils.scala:262)
	at kafka.controller.KafkaController$$anonfun$kafka$controller$KafkaController$$checkAndTriggerPartitionRebalance$4$$anonfun$apply$18.apply(KafkaController.scala:1217)
	at kafka.controller.KafkaController$$anonfun$kafka$controller$KafkaController$$checkAndTriggerPartitionRebalance$4$$anonfun$apply$18.apply(KafkaController.scala:1215)
	at scala.collection.mutable.HashMap$$anonfun$foreach$1.apply(HashMap.scala:99)
	at scala.collection.mutable.HashMap$$anonfun$foreach$1.apply(HashMap.scala:99)
	at scala.collection.mutable.HashTable$class.foreachEntry(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:40)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:99)
	at kafka.controller.KafkaController$$anonfun$kafka$controller$KafkaController$$checkAndTriggerPartitionRebalance$4.apply(KafkaController.scala:1215)
	at kafka.controller.KafkaController$$anonfun$kafka$controller$KafkaController$$checkAndTriggerPartitionRebalance$4.apply(KafkaController.scala:1194)
	at scala.collection.immutable.Map$Map2.foreach(Map.scala:137)
	at kafka.controller.KafkaController.kafka$controller$KafkaController$$checkAndTriggerPartitionRebalance(KafkaController.scala:1194)
	at kafka.controller.KafkaController$$anonfun$onControllerFailover$1.apply$mcV$sp(KafkaController.scala:344)
	at kafka.utils.KafkaScheduler$$anonfun$1.apply$mcV$sp(KafkaScheduler.scala:110)
	at kafka.utils.CoreUtils$$anon$1.run(CoreUtils.scala:60)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.runAndReset(FutureTask.java:308)
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$301(ScheduledThreadPoolExecutor.java:180)
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:294)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
	at java.lang.Thread.run(Thread.java:745)
Caused by: kafka.common.StateChangeFailedException: Preferred replica 2 for partition [pipeline,2] is either not alive or not in the isr. Current leader and ISR: [{"leader":1,"leader_epoch":54,"isr":[1]}]
	at kafka.controller.PreferredReplicaPartitionLeaderSelector.selectLeader(PartitionLeaderSelector.scala:159)
	at kafka.controller.PartitionStateMachine.electLeaderForPartition(PartitionStateMachine.scala:345)
	... 31 more
[2016-04-27 16:44:42,993] TRACE Controller 1 epoch 68 started leader election for partition [pipeline,0] (state.change.logger)
[2016-04-27 16:44:42,997] ERROR Controller 1 epoch 68 encountered error while electing leader for partition [pipeline,0] due to: Preferred replica 2 for partition [pipeline,0] is either not alive or not in the isr. Current leader and ISR: [{"leader":1,"leader_epoch":54,"isr":[1]}]. (state.change.logger)
[2016-04-27 16:44:42,997] ERROR Controller 1 epoch 68 initiated state change for partition [pipeline,0] from OnlinePartition to OnlinePartition failed (state.change.logger)
kafka.common.StateChangeFailedException: encountered error while electing leader for partition [pipeline,0] due to: Preferred replica 2 for partition [pipeline,0] is either not alive or not in the isr. Current leader and ISR: [{"leader":1,"leader_epoch":54,"isr":[1]}].
	at kafka.controller.PartitionStateMachine.electLeaderForPartition(PartitionStateMachine.scala:368)
	at kafka.controller.PartitionStateMachine.kafka$controller$PartitionStateMachine$$handleStateChange(PartitionStateMachine.scala:207)
	at kafka.controller.PartitionStateMachine$$anonfun$handleStateChanges$2.apply(PartitionStateMachine.scala:146)
	at kafka.controller.PartitionStateMachine$$anonfun$handleStateChanges$2.apply(PartitionStateMachine.scala:145)
	at scala.collection.immutable.Set$Set1.foreach(Set.scala:79)
	at kafka.controller.PartitionStateMachine.handleStateChanges(PartitionStateMachine.scala:145)
	at kafka.controller.KafkaController.onPreferredReplicaElection(KafkaController.scala:662)
	at kafka.controller.KafkaController$$anonfun$kafka$controller$KafkaController$$checkAndTriggerPartitionRebalance$4$$anonfun$apply$18$$anonfun$apply$5.apply$mcV$sp(KafkaController.scala:1225)
	at kafka.controller.KafkaController$$anonfun$kafka$controller$KafkaController$$checkAndTriggerPartitionRebalance$4$$anonfun$apply$18$$anonfun$apply$5.apply(KafkaController.scala:1220)
	at kafka.controller.KafkaController$$anonfun$kafka$controller$KafkaController$$checkAndTriggerPartitionRebalance$4$$anonfun$apply$18$$anonfun$apply$5.apply(KafkaController.scala:1220)
	at kafka.utils.CoreUtils$.inLock(CoreUtils.scala:262)
	at kafka.controller.KafkaController$$anonfun$kafka$controller$KafkaController$$checkAndTriggerPartitionRebalance$4$$anonfun$apply$18.apply(KafkaController.scala:1217)
	at kafka.controller.KafkaController$$anonfun$kafka$controller$KafkaController$$checkAndTriggerPartitionRebalance$4$$anonfun$apply$18.apply(KafkaController.scala:1215)
	at scala.collection.mutable.HashMap$$anonfun$foreach$1.apply(HashMap.scala:99)
	at scala.collection.mutable.HashMap$$anonfun$foreach$1.apply(HashMap.scala:99)
	at scala.collection.mutable.HashTable$class.foreachEntry(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:40)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:99)
	at kafka.controller.KafkaController$$anonfun$kafka$controller$KafkaController$$checkAndTriggerPartitionRebalance$4.apply(KafkaController.scala:1215)
	at kafka.controller.KafkaController$$anonfun$kafka$controller$KafkaController$$checkAndTriggerPartitionRebalance$4.apply(KafkaController.scala:1194)
	at scala.collection.immutable.Map$Map2.foreach(Map.scala:137)
	at kafka.controller.KafkaController.kafka$controller$KafkaController$$checkAndTriggerPartitionRebalance(KafkaController.scala:1194)
	at kafka.controller.KafkaController$$anonfun$onControllerFailover$1.apply$mcV$sp(KafkaController.scala:344)
	at kafka.utils.KafkaScheduler$$anonfun$1.apply$mcV$sp(KafkaScheduler.scala:110)
	at kafka.utils.CoreUtils$$anon$1.run(CoreUtils.scala:60)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.runAndReset(FutureTask.java:308)
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$301(ScheduledThreadPoolExecutor.java:180)
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:294)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
	at java.lang.Thread.run(Thread.java:745)
Caused by: kafka.common.StateChangeFailedException: Preferred replica 2 for partition [pipeline,0] is either not alive or not in the isr. Current leader and ISR: [{"leader":1,"leader_epoch":54,"isr":[1]}]
	at kafka.controller.PreferredReplicaPartitionLeaderSelector.selectLeader(PartitionLeaderSelector.scala:159)
	at kafka.controller.PartitionStateMachine.electLeaderForPartition(PartitionStateMachine.scala:345)
	... 31 more
[2016-04-27 16:44:44,893] TRACE Broker 1 cached leader info (LeaderAndIsrInfo:(Leader:1,ISR:1,2,LeaderEpoch:51,ControllerEpoch:68),ReplicationFactor:2),AllReplicas:1,2) for partition [pipeline,1] in response to UpdateMetadata request sent by controller 2 epoch 69 with correlation id 0 (state.change.logger)
[2016-04-27 16:44:44,893] TRACE Broker 1 cached leader info (LeaderAndIsrInfo:(Leader:1,ISR:1,LeaderEpoch:54,ControllerEpoch:68),ReplicationFactor:2),AllReplicas:2,1) for partition [pipeline,2] in response to UpdateMetadata request sent by controller 2 epoch 69 with correlation id 0 (state.change.logger)
[2016-04-27 16:44:44,894] TRACE Broker 1 cached leader info (LeaderAndIsrInfo:(Leader:1,ISR:1,LeaderEpoch:54,ControllerEpoch:68),ReplicationFactor:2),AllReplicas:2,1) for partition [pipeline,0] in response to UpdateMetadata request sent by controller 2 epoch 69 with correlation id 0 (state.change.logger)
[2016-04-27 16:44:44,898] TRACE Broker 1 received LeaderAndIsr request (LeaderAndIsrInfo:(Leader:1,ISR:1,2,LeaderEpoch:51,ControllerEpoch:68),ReplicationFactor:2),AllReplicas:1,2) correlation id 1 from controller 2 epoch 69 for partition [pipeline,1] (state.change.logger)
[2016-04-27 16:44:44,899] TRACE Broker 1 received LeaderAndIsr request (LeaderAndIsrInfo:(Leader:1,ISR:1,LeaderEpoch:54,ControllerEpoch:68),ReplicationFactor:2),AllReplicas:2,1) correlation id 1 from controller 2 epoch 69 for partition [pipeline,2] (state.change.logger)
[2016-04-27 16:44:44,899] TRACE Broker 1 received LeaderAndIsr request (LeaderAndIsrInfo:(Leader:1,ISR:1,LeaderEpoch:54,ControllerEpoch:68),ReplicationFactor:2),AllReplicas:2,1) correlation id 1 from controller 2 epoch 69 for partition [pipeline,0] (state.change.logger)
[2016-04-27 16:44:44,899] WARN Broker 1 ignoring LeaderAndIsr request from controller 2 with correlation id 1 epoch 69 for partition [pipeline,1] since its associated leader epoch 51 is old. Current leader epoch is 51 (state.change.logger)
[2016-04-27 16:44:44,899] WARN Broker 1 ignoring LeaderAndIsr request from controller 2 with correlation id 1 epoch 69 for partition [pipeline,2] since its associated leader epoch 54 is old. Current leader epoch is 54 (state.change.logger)
[2016-04-27 16:44:44,899] WARN Broker 1 ignoring LeaderAndIsr request from controller 2 with correlation id 1 epoch 69 for partition [pipeline,0] since its associated leader epoch 54 is old. Current leader epoch is 54 (state.change.logger)
[2016-04-27 16:44:44,900] TRACE Broker 1 cached leader info (LeaderAndIsrInfo:(Leader:1,ISR:1,2,LeaderEpoch:51,ControllerEpoch:68),ReplicationFactor:2),AllReplicas:1,2) for partition [pipeline,1] in response to UpdateMetadata request sent by controller 2 epoch 69 with correlation id 2 (state.change.logger)
[2016-04-27 16:44:44,900] TRACE Broker 1 cached leader info (LeaderAndIsrInfo:(Leader:1,ISR:1,LeaderEpoch:54,ControllerEpoch:68),ReplicationFactor:2),AllReplicas:2,1) for partition [pipeline,2] in response to UpdateMetadata request sent by controller 2 epoch 69 with correlation id 2 (state.change.logger)
[2016-04-27 16:44:44,900] TRACE Broker 1 cached leader info (LeaderAndIsrInfo:(Leader:1,ISR:1,LeaderEpoch:54,ControllerEpoch:68),ReplicationFactor:2),AllReplicas:2,1) for partition [pipeline,0] in response to UpdateMetadata request sent by controller 2 epoch 69 with correlation id 2 (state.change.logger)
[2016-04-27 16:44:44,910] TRACE Broker 1 received LeaderAndIsr request (LeaderAndIsrInfo:(Leader:1,ISR:1,2,LeaderEpoch:52,ControllerEpoch:69),ReplicationFactor:2),AllReplicas:1,2) correlation id 3 from controller 2 epoch 69 for partition [pipeline,1] (state.change.logger)
[2016-04-27 16:44:44,911] TRACE Broker 1 received LeaderAndIsr request (LeaderAndIsrInfo:(Leader:1,ISR:1,LeaderEpoch:55,ControllerEpoch:69),ReplicationFactor:2),AllReplicas:2,1) correlation id 3 from controller 2 epoch 69 for partition [pipeline,2] (state.change.logger)
[2016-04-27 16:44:44,911] TRACE Broker 1 received LeaderAndIsr request (LeaderAndIsrInfo:(Leader:1,ISR:1,LeaderEpoch:55,ControllerEpoch:69),ReplicationFactor:2),AllReplicas:2,1) correlation id 3 from controller 2 epoch 69 for partition [pipeline,0] (state.change.logger)
[2016-04-27 16:44:44,911] TRACE Broker 1 handling LeaderAndIsr request correlationId 3 from controller 2 epoch 69 starting the become-leader transition for partition [pipeline,2] (state.change.logger)
[2016-04-27 16:44:44,911] TRACE Broker 1 handling LeaderAndIsr request correlationId 3 from controller 2 epoch 69 starting the become-leader transition for partition [pipeline,0] (state.change.logger)
[2016-04-27 16:44:44,911] TRACE Broker 1 handling LeaderAndIsr request correlationId 3 from controller 2 epoch 69 starting the become-leader transition for partition [pipeline,1] (state.change.logger)
[2016-04-27 16:44:44,912] INFO Broker 1 skipped the become-leader state change after marking its partition as leader with correlation id 3 from controller 2 epoch 69 for partition [pipeline,2] since it is already the leader for the partition. (state.change.logger)
[2016-04-27 16:44:44,912] INFO Broker 1 skipped the become-leader state change after marking its partition as leader with correlation id 3 from controller 2 epoch 69 for partition [pipeline,0] since it is already the leader for the partition. (state.change.logger)
[2016-04-27 16:44:44,912] INFO Broker 1 skipped the become-leader state change after marking its partition as leader with correlation id 3 from controller 2 epoch 69 for partition [pipeline,1] since it is already the leader for the partition. (state.change.logger)
[2016-04-27 16:44:44,912] TRACE Broker 1 completed LeaderAndIsr request correlationId 3 from controller 2 epoch 69 for the become-leader transition for partition [pipeline,2] (state.change.logger)
[2016-04-27 16:44:44,912] TRACE Broker 1 completed LeaderAndIsr request correlationId 3 from controller 2 epoch 69 for the become-leader transition for partition [pipeline,0] (state.change.logger)
[2016-04-27 16:44:44,912] TRACE Broker 1 completed LeaderAndIsr request correlationId 3 from controller 2 epoch 69 for the become-leader transition for partition [pipeline,1] (state.change.logger)
[2016-04-27 16:44:44,913] TRACE Broker 1 cached leader info (LeaderAndIsrInfo:(Leader:1,ISR:1,2,LeaderEpoch:52,ControllerEpoch:69),ReplicationFactor:2),AllReplicas:1,2) for partition [pipeline,1] in response to UpdateMetadata request sent by controller 2 epoch 69 with correlation id 4 (state.change.logger)
[2016-04-27 16:44:44,913] TRACE Broker 1 cached leader info (LeaderAndIsrInfo:(Leader:1,ISR:1,LeaderEpoch:55,ControllerEpoch:69),ReplicationFactor:2),AllReplicas:2,1) for partition [pipeline,2] in response to UpdateMetadata request sent by controller 2 epoch 69 with correlation id 4 (state.change.logger)
[2016-04-27 16:44:44,913] TRACE Broker 1 cached leader info (LeaderAndIsrInfo:(Leader:1,ISR:1,LeaderEpoch:55,ControllerEpoch:69),ReplicationFactor:2),AllReplicas:2,1) for partition [pipeline,0] in response to UpdateMetadata request sent by controller 2 epoch 69 with correlation id 4 (state.change.logger)
