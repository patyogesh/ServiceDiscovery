[2016-04-27 13:16:37,164] TRACE [Controller 1]: checking need to trigger partition rebalance (kafka.controller.KafkaController)
[2016-04-27 13:16:37,254] DEBUG [Controller 1]: preferred replicas by broker Map(2 -> Map([pipeline,2] -> List(2, 1), [pipeline,0] -> List(2, 1)), 1 -> Map([pipeline,1] -> List(1, 2))) (kafka.controller.KafkaController)
[2016-04-27 13:16:37,254] DEBUG [Controller 1]: topics not in preferred replica Map([pipeline,2] -> List(2, 1), [pipeline,0] -> List(2, 1)) (kafka.controller.KafkaController)
[2016-04-27 13:16:37,256] TRACE [Controller 1]: leader imbalance ratio for broker 2 is 1.000000 (kafka.controller.KafkaController)
[2016-04-27 13:16:37,256] DEBUG [Controller 1]: topics not in preferred replica Map() (kafka.controller.KafkaController)
[2016-04-27 13:16:37,256] TRACE [Controller 1]: leader imbalance ratio for broker 1 is 0.000000 (kafka.controller.KafkaController)
[2016-04-27 13:16:39,138] DEBUG [IsrChangeNotificationListener] Fired!!! (kafka.controller.IsrChangeNotificationListener)
[2016-04-27 13:16:39,140] INFO [BrokerChangeListener on Controller 1]: Broker change listener fired for path /brokers/ids with children 1,2 (kafka.controller.ReplicaStateMachine$BrokerChangeListener)
[2016-04-27 13:16:39,169] INFO [BrokerChangeListener on Controller 1]: Newly added brokers: 1,2, deleted brokers: , all live brokers: 1,2 (kafka.controller.ReplicaStateMachine$BrokerChangeListener)
[2016-04-27 13:16:39,169] DEBUG [Channel manager on controller 1]: Controller 1 trying to connect to broker 1 (kafka.controller.ControllerChannelManager)
[2016-04-27 13:16:39,173] DEBUG [Channel manager on controller 1]: Controller 1 trying to connect to broker 2 (kafka.controller.ControllerChannelManager)
[2016-04-27 13:16:39,173] INFO [Controller-1-to-broker-1-send-thread], Starting  (kafka.controller.RequestSendThread)
[2016-04-27 13:16:39,174] INFO [Controller-1-to-broker-2-send-thread], Starting  (kafka.controller.RequestSendThread)
[2016-04-27 13:16:39,175] INFO [Controller 1]: New broker startup callback for 1,2 (kafka.controller.KafkaController)
[2016-04-27 13:16:39,178] INFO [Controller-1-to-broker-2-send-thread], Controller 1 connected to Node(2, 10.0.0.9, 9093) for sending state change requests (kafka.controller.RequestSendThread)
[2016-04-27 13:16:39,178] INFO [Controller-1-to-broker-1-send-thread], Controller 1 connected to Node(1, 10.0.0.9, 9092) for sending state change requests (kafka.controller.RequestSendThread)
[2016-04-27 13:16:39,179] INFO [Replica state machine on controller 1]: Invoking state change to OnlineReplica for replicas [Topic=pipeline,Partition=0,Replica=2],[Topic=pipeline,Partition=1,Replica=2],[Topic=pipeline,Partition=0,Replica=1],[Topic=pipeline,Partition=1,Replica=1],[Topic=pipeline,Partition=2,Replica=1],[Topic=pipeline,Partition=2,Replica=2] (kafka.controller.ReplicaStateMachine)
[2016-04-27 13:16:39,188] DEBUG [OfflinePartitionLeaderSelector]: Some broker in ISR is alive for [pipeline,1]. Select 1 from ISR 1,2 to be the leader. (kafka.controller.OfflinePartitionLeaderSelector)
[2016-04-27 13:16:39,188] INFO [OfflinePartitionLeaderSelector]: Selected new leader and ISR {"leader":1,"leader_epoch":49,"isr":[1,2]} for offline partition [pipeline,1] (kafka.controller.OfflinePartitionLeaderSelector)
[2016-04-27 13:16:39,190] DEBUG [Partition state machine on Controller 1]: After leader election, leader cache is updated to Map([pipeline,1] -> (Leader:1,ISR:1,2,LeaderEpoch:49,ControllerEpoch:65), [pipeline,2] -> (Leader:1,ISR:1,LeaderEpoch:51,ControllerEpoch:63), [pipeline,0] -> (Leader:1,ISR:1,LeaderEpoch:51,ControllerEpoch:63)) (kafka.controller.PartitionStateMachine)
[2016-04-27 13:16:39,195] DEBUG [OfflinePartitionLeaderSelector]: Some broker in ISR is alive for [pipeline,2]. Select 1 from ISR 1 to be the leader. (kafka.controller.OfflinePartitionLeaderSelector)
[2016-04-27 13:16:39,196] INFO [OfflinePartitionLeaderSelector]: Selected new leader and ISR {"leader":1,"leader_epoch":52,"isr":[1]} for offline partition [pipeline,2] (kafka.controller.OfflinePartitionLeaderSelector)
[2016-04-27 13:16:39,197] DEBUG [Partition state machine on Controller 1]: After leader election, leader cache is updated to Map([pipeline,1] -> (Leader:1,ISR:1,2,LeaderEpoch:49,ControllerEpoch:65), [pipeline,2] -> (Leader:1,ISR:1,LeaderEpoch:52,ControllerEpoch:65), [pipeline,0] -> (Leader:1,ISR:1,LeaderEpoch:51,ControllerEpoch:63)) (kafka.controller.PartitionStateMachine)
[2016-04-27 13:16:39,199] DEBUG [OfflinePartitionLeaderSelector]: Some broker in ISR is alive for [pipeline,0]. Select 1 from ISR 1 to be the leader. (kafka.controller.OfflinePartitionLeaderSelector)
[2016-04-27 13:16:39,199] INFO [OfflinePartitionLeaderSelector]: Selected new leader and ISR {"leader":1,"leader_epoch":52,"isr":[1]} for offline partition [pipeline,0] (kafka.controller.OfflinePartitionLeaderSelector)
[2016-04-27 13:16:39,200] DEBUG [Partition state machine on Controller 1]: After leader election, leader cache is updated to Map([pipeline,1] -> (Leader:1,ISR:1,2,LeaderEpoch:49,ControllerEpoch:65), [pipeline,2] -> (Leader:1,ISR:1,LeaderEpoch:52,ControllerEpoch:65), [pipeline,0] -> (Leader:1,ISR:1,LeaderEpoch:52,ControllerEpoch:65)) (kafka.controller.PartitionStateMachine)
[2016-04-27 13:16:39,202] DEBUG [TopicChangeListener on Controller 1]: Topic change listener fired for path /brokers/topics with children pipeline (kafka.controller.PartitionStateMachine$TopicChangeListener)
[2016-04-27 13:16:39,202] INFO [TopicChangeListener on Controller 1]: New topics: [Set()], deleted topics: [Set()], new partition replica assignment [Map()] (kafka.controller.PartitionStateMachine$TopicChangeListener)
[2016-04-27 13:16:39,204] DEBUG [Controller 1]: Controller resigning, broker id 1 (kafka.controller.KafkaController)
[2016-04-27 13:16:39,204] DEBUG [Controller 1]: De-registering IsrChangeNotificationListener (kafka.controller.KafkaController)
[2016-04-27 13:16:39,205] INFO [Partition state machine on Controller 1]: Stopped partition state machine (kafka.controller.PartitionStateMachine)
[2016-04-27 13:16:39,205] INFO [Replica state machine on controller 1]: Stopped replica state machine (kafka.controller.ReplicaStateMachine)
[2016-04-27 13:16:39,207] WARN [Controller-1-to-broker-2-send-thread], Controller 1 epoch 65 fails to send request {controller_id=1,controller_epoch=65,partition_states=[{topic=pipeline,partition=1,controller_epoch=63,leader=1,leader_epoch=48,isr=[1,2],zk_version=87,replicas=[1,2]},{topic=pipeline,partition=0,controller_epoch=63,leader=1,leader_epoch=51,isr=[1],zk_version=67,replicas=[2,1]},{topic=pipeline,partition=2,controller_epoch=63,leader=1,leader_epoch=51,isr=[1],zk_version=69,replicas=[2,1]}],live_leaders=[{id=1,host=10.0.0.9,port=9092}]} to broker Node(2, 10.0.0.9, 9093). Reconnecting to broker. (kafka.controller.RequestSendThread)
java.nio.channels.ClosedSelectorException
	at sun.nio.ch.SelectorImpl.lockAndDoSelect(SelectorImpl.java:83)
	at sun.nio.ch.SelectorImpl.select(SelectorImpl.java:97)
	at org.apache.kafka.common.network.Selector.select(Selector.java:425)
	at org.apache.kafka.common.network.Selector.poll(Selector.java:254)
	at org.apache.kafka.clients.NetworkClient.poll(NetworkClient.java:270)
	at kafka.utils.NetworkClientBlockingOps$.recurse$1(NetworkClientBlockingOps.scala:128)
	at kafka.utils.NetworkClientBlockingOps$.kafka$utils$NetworkClientBlockingOps$$pollUntilFound$extension(NetworkClientBlockingOps.scala:139)
	at kafka.utils.NetworkClientBlockingOps$.blockingSendAndReceive$extension(NetworkClientBlockingOps.scala:80)
	at kafka.controller.RequestSendThread.liftedTree1$1(ControllerChannelManager.scala:180)
	at kafka.controller.RequestSendThread.doWork(ControllerChannelManager.scala:171)
	at kafka.utils.ShutdownableThread.run(ShutdownableThread.scala:63)
[2016-04-27 13:16:39,207] INFO [Controller-1-to-broker-2-send-thread], Shutting down (kafka.controller.RequestSendThread)
[2016-04-27 13:16:39,210] INFO [Controller-1-to-broker-2-send-thread], Stopped  (kafka.controller.RequestSendThread)
[2016-04-27 13:16:39,210] INFO [Controller-1-to-broker-2-send-thread], Shutdown completed (kafka.controller.RequestSendThread)
[2016-04-27 13:16:39,210] INFO [Controller-1-to-broker-1-send-thread], Shutting down (kafka.controller.RequestSendThread)
[2016-04-27 13:16:39,210] INFO [Controller-1-to-broker-1-send-thread], Stopped  (kafka.controller.RequestSendThread)
[2016-04-27 13:16:39,210] INFO [Controller-1-to-broker-1-send-thread], Shutdown completed (kafka.controller.RequestSendThread)
[2016-04-27 13:16:39,211] INFO [Controller 1]: Broker 1 resigned as the controller (kafka.controller.KafkaController)
[2016-04-27 13:16:39,211] INFO [AddPartitionsListener on 1]: Add Partition triggered {"version":1,"partitions":{"2":[2,1],"1":[1,2],"0":[2,1]}} for path /brokers/topics/pipeline (kafka.controller.PartitionStateMachine$AddPartitionsListener)
[2016-04-27 13:16:39,214] INFO [SessionExpirationListener on 1], ZK expired; shut down all controller components and try to re-elect (kafka.controller.KafkaController$SessionExpirationListener)
[2016-04-27 13:16:39,214] DEBUG [Controller 1]: Controller resigning, broker id 1 (kafka.controller.KafkaController)
[2016-04-27 13:16:39,214] DEBUG [Controller 1]: De-registering IsrChangeNotificationListener (kafka.controller.KafkaController)
[2016-04-27 13:16:39,214] INFO [Partition state machine on Controller 1]: Stopped partition state machine (kafka.controller.PartitionStateMachine)
[2016-04-27 13:16:39,214] INFO [Replica state machine on controller 1]: Stopped replica state machine (kafka.controller.ReplicaStateMachine)
[2016-04-27 13:16:39,214] INFO [Controller 1]: Broker 1 resigned as the controller (kafka.controller.KafkaController)
[2016-04-27 13:16:39,218] DEBUG [IsrChangeNotificationListener] Fired!!! (kafka.controller.IsrChangeNotificationListener)
[2016-04-27 13:16:39,218] INFO [BrokerChangeListener on Controller 1]: Broker change listener fired for path /brokers/ids with children 1,2 (kafka.controller.ReplicaStateMachine$BrokerChangeListener)
[2016-04-27 13:16:39,222] INFO [AddPartitionsListener on 1]: Add Partition triggered {"version":1,"partitions":{"2":[2,1],"1":[1,2],"0":[2,1]}} for path /brokers/topics/pipeline (kafka.controller.PartitionStateMachine$AddPartitionsListener)
